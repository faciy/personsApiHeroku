{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/person.js","App.js","index.js"],"names":["Filter","props","value","onChange","PersonForm","onSubmit","valueName","valueNumber","onChangeNumber","type","Persons","person","togglePerson","name","number","onClick","baseUrl","axios","get","newObjet","post","id","put","delete","Notification","message","className","ErroNotification","messageError","App","useState","newName","setNewName","setNumber","search","setSearch","persons","setPersons","succesMessage","setSuccesMessage","errorMessage","setErrorMessage","useEffect","console","log","personService","then","response","data","filterName","filter","event","target","preventDefault","map","personne","includes","window","confirm","val","idsearch","find","idmodif","setTimeout","catch","error","concat","p","togglePersonOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97fd3c8a.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = (props) => {\n  \n  return (\n    <div>\n      filter shown with: <input value={props.value} onChange={props.onChange} />\n    </div>\n  )\n}\n\nexport default Filter;\n","import React from 'react'\n\nfunction PersonForm(props) {\n    return (\n        <form onSubmit={props.onSubmit} >\n            <div>\n                name: <input value={props.valueName} onChange={props.onChange} />\n            </div>\n\n            <div>\n                number: <input  value={props.valueNumber} onChange={props.onChangeNumber}/>\n            </div>\n            <div>\n                <button type=\"submit\" >add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm;\n","import React from 'react'\n\n\nconst Persons = ({ person, togglePerson }) => {\n\n    return (\n        <div>\n            <p>{person.name} {person.number} <button onClick={togglePerson}>delete</button> </p>\n        </div>\n    )\n}\n\nexport default Persons;\n","import axios from 'axios';\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst create = newObjet => {\n    return axios.post(baseUrl, newObjet)\n}\n\nconst update = (id, newObjet) => {\n    return axios.put(`${baseUrl}/${id}`, newObjet)\n}\n\n\nconst suppr = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default { \n    getAll,\n    create,\n    update, \n    suppr\n}","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\n// import axios from 'axios'\nimport Persons from './components/Persons'\nimport personService from './services/person'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className=\"succes\">\n      <p>{message}</p>\n    </div>\n  )\n}\n\nconst ErroNotification = ({ messageError }) => {\n  if (messageError === null) {\n    return null\n  }\n    return (\n      <div className=\"error\">\n        <p>{messageError}</p>\n      </div>\n    )\n}\n\nconst App = () => {\n\n  const [newName, setNewName] = useState('')\n  const [number, setNumber] = useState('')\n  const [search, setSearch] = useState('')\n  const [persons, setPersons] = useState([])\n  const [succesMessage, setSuccesMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    console.log('effect')\n    personService\n      .getAll()\n      .then(response => {\n        console.log('promise', response.data)\n        setPersons(response.data)\n      })\n  }, [])\n\n  const handleChange = (event) => {\n    // console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleChangeNumber = (event) => {\n    // console.log(event.target.value)\n    setNumber(event.target.value)\n  }\n\n  const handleChangeSeach = (event) => {\n    // console.log(event.target.value)\n    setSearch(event.target.value)\n  }\n\n\n  const addName = (event) => {\n    event.preventDefault()\n    const block = persons.map((personne) => personne.name).includes(newName)\n    // console.log(block)\n    if (!block) {\n      const newObjet = {\n        name: newName,\n        number: number\n      }\n      personService\n        .create(newObjet)\n        .then(response => {\n          setPersons(persons.concat(response.data))\n          setSuccesMessage(\n            `Added ${newName}`\n          )\n          setTimeout(() => {\n            setSuccesMessage(null)\n          }, 5000)\n          setNewName('')\n          setNumber('')\n        })\n\n    } else {\n\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one`)) {\n        const id = filterName.filter(val => val.name === newName)[0].id\n        const idsearch = persons.find(val => val.id === id)\n        const idmodif = { ...idsearch, number: number }\n        personService\n        .update(id,idmodif)\n          .then(response => {\n            setPersons(persons.map(val => val.id !== id ? val : response.data))\n            setSuccesMessage(\n              `Modificate Number of ${newName} in ${number}`\n            )\n            setTimeout(() => {\n              setSuccesMessage(null)\n            }, 5000)\n            setNewName('')\n            setNumber('')\n          })\n          .catch(error => {\n            setErrorMessage(\n              `Note '${newName}' was already removed from server`\n            )\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n          })\n\n      }\n    }\n\n  }\n\n  const filterName = persons.filter(person => {\n    return person.name\n  })\n\n  const togglePersonOf = (id) => {\n    console.log(`importance of ${id} needs to be toggled`)\n    // const url = `http://localhost:3001/persons/${id}`\n    // console.log('url', url)\n    const person = filterName.find(p => p.id === id)\n    if (window.confirm('Delete ' + person.name + ' ?')) {\n      personService\n      .suppr(id)\n        .then(response => {\n          setPersons(filterName.filter(p => p.id !== id))\n          setSuccesMessage(\n            `Delete ${newName}`\n          )\n          setTimeout(() => {\n            setSuccesMessage(null)\n          }, 5000)\n          setNewName('')\n          setNumber('')\n        })\n    }\n  }\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={succesMessage} />\n      <ErroNotification messageError={errorMessage} />\n      <Filter value={search} onChange={handleChangeSeach} />\n      <h2>add a new</h2>\n      <PersonForm onChange={handleChange} onChangeNumber={handleChangeNumber} onSubmit={addName} valueName={newName} valueNumber={number} />\n      <h2>Numbers</h2>\n      {filterName.map(person =>\n        <Persons key={person.id} person={person} togglePerson={() => togglePersonOf(person.id)} />\n      )}\n    </div>\n  )\n\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}